{"version":3,"file":"public/javascripts/app.js","sources":["app/citrus_console.coffee","app/utils.coffee"],"names":[],"mappings":"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","sourcesContent":["window.citrus = {}\nwindow.citrus.console = {}\n\nrequire('utils')\n\nclass citrus.console.Application\n  constructor: ->\n    usecase    = new citrus.console.Usecase()\n    gui        = new citrus.console.Gui()\n    serverSide = new citrus.console.ServerSide('http://api.citrus.arkency')\n    glue       = new citrus.console.Glue(usecase, gui, serverSide)\n    usecase.start()\n\n\nclass citrus.Build\n  constructor: (@uuid, @output = \"\") ->\n\n\nclass citrus.console.Usecase\n  constructor: ->\n\n  start: =>\n\n  setBuild: (@build) =>\n\n  addConsoleEntry: (entry) =>\n    @build.output << entry\n\n\nclass citrus.console.Glue\n  constructor: (@usecase, @gui, @serverSide) ->\n    @applyLogging()\n\n    Before(@usecase, 'start', @loadData)\n    After(@usecase, 'setBuild', @showConsole)\n    After(@usecase, 'setBuild', @fetchConsole)\n    After(@serverSide, 'consoleDataReceived', @addConsoleEntry)\n    After(@usecase, 'addConsoleEntry', @appendConsoleEntry)\n\n  loadData: =>\n    uuid = @gui.getBuildIdFromUrl()\n    @usecase.setBuild(new citrus.Build(uuid))\n\n  showConsole: (build) =>\n    @gui.showConsole(build)\n\n  fetchConsole: (build) =>\n    @serverSide.fetchConsole(build)\n\n  addConsoleEntry: (entry) =>\n    @usecase.addConsoleEntry(entry)\n\n  appendConsoleEntry: (entry) =>\n    @gui.appendConsoleEntry(entry)\n\n  applyLogging: =>\n    [@usecase, @gui, @serverSide].map((component) => LogAll(component))\n\n\nclass citrus.console.Gui\n  constructor: ->\n\n  getBuildIdFromUrl: =>\n    $.url().param('uuid')\n\n  showConsole: (build) =>\n    $('[data-role=\"build-name\"]').html(\"Build #{build.uuid}\")\n\n  appendConsoleEntry: (entry) =>\n    $('[data-role=\"build-console\"]').append(entry)\n\nclass citrus.console.InMemoryServerSide\n  constructor: ->\n\n  fetchConsole: (build) =>\n    @consoleDataReceived('........')\n    intervalId = setInterval(( => @consoleDataReceived('.')), 25)\n    setTimeout(( =>\n      clearInterval(intervalId)\n      @consoleDataReceived('\\n\\nFinished in 0.84704 seconds\\n62 examples, 0 failures\\n\\nRandomized with seed 15015')\n    ), 1000)\n\n  consoleDataReceived: (data) =>\n\nclass citrus.console.ServerSide\n  constructor: (@apiUrl) ->\n\n  fetchConsole: (build) =>\n    eventSource = new EventSource(\"#{@apiUrl}/builds/#{build.uuid}/console\")\n    eventSource.addEventListener('message', (message) => @consoleDataReceived(message.data))\n\n  consoleDataReceived: (data) =>\n\n\n$(document).ready ->\n  new citrus.console.Application()\n\n\n","_.defaults this,\n  LogAll: (object) ->\n    for own key, value of object\n      if _.isFunction(value)\n        do (key) ->\n          Before(object, key, -> console.log(\"##{key}\"))\n\n"]}